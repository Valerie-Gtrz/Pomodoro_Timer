{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/ProgressBar.js","pomodoro/Session.js","pomodoro/Focus.js","pomodoro/Break.js","pomodoro/SessionBtns.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","ProgressBar","progress","currentTime","totalTime","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Session","session","breakDuration","focusDuration","label","data-testid","givenSeconds","seconds","round","secondsToDuration","timeRemaining","abs","Focus","handleFocusDecrease","handleFocusIncrease","type","onClick","disabled","Break","handleBreakDecrease","handleBreakIncrease","ActionBtns","playPause","isTimerRunning","stop","aria-label","title","oi","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","currentDuration","min","SessionBtns","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f0fcda5.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react'\r\n\r\nfunction ProgressBar({ currentTime, totalTime}) {\r\n    const progress = (currentTime / totalTime) * 100;\r\n    return(\r\n        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n        <div\r\n          className=\"progress-bar\"\r\n          role=\"progressbar\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuemax=\"100\"\r\n          aria-valuenow={progress}// TODO: Increase aria-valuenow as elapsed time increases\r\n          style={{ width: `${progress}%` }} // TODO: Increase width % as elapsed time increases\r\n        />\r\n      </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\nexport default ProgressBar;","import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\n\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\n\r\nfunction Session({ session, breakDuration, focusDuration }) {\r\n    const duration = session?.label === \"Focusing\" ? focusDuration: breakDuration;\r\n    const totalTime = duration * 60;\r\n  return (\r\n    session && (\r\n      <div>\r\n        {/* DONE! This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* DONE! Update message below to include current session (Focusing or On Break) total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {session.label} for {session.label === \"Focusing\" ? minutesToDuration(focusDuration): minutesToDuration(breakDuration)} minutes\r\n            </h2>\r\n            {/* DONE! Update message below correctly format the time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(session.timeRemaining)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n           <ProgressBar currentTime={Math.abs(session.timeRemaining - totalTime)} totalTime={totalTime}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Session;\r\n","import React from 'react';\r\nimport { minutesToDuration } from '../utils/duration';\r\n\r\n\r\nfunction Focus({focusDuration, handleFocusDecrease, handleFocusIncrease, session}) {\r\n    return (\r\n<div className=\"col\">\r\n<div className=\"input-group input-group-lg mb-2\">\r\n  <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n    {/* DONE? ======TODO: Update this text to display the current focus session duration */}\r\n    {/*minutesToDuration converts numbers into minutes */}\r\n    Focus Duration: {minutesToDuration(focusDuration)}\r\n  </span>\r\n  <div className=\"input-group-append\">\r\n    {/* DONE? TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-secondary\"\r\n      data-testid=\"decrease-focus\"\r\n      onClick={handleFocusDecrease}\r\n      disabled={session || focusDuration === 5}\r\n    >\r\n      <span className=\"oi oi-minus\" />\r\n    </button>\r\n    {/*DONE! TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-secondary\"\r\n      data-testid=\"increase-focus\"\r\n      onClick={handleFocusIncrease}\r\n      disabled={session || focusDuration >= 60}\r\n    >\r\n      <span className=\"oi oi-plus\" />\r\n    </button>\r\n  </div>\r\n</div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Focus;","import React from 'react';\r\nimport { minutesToDuration } from '../utils/duration';\r\n\r\n\r\n\r\nfunction Break({session, handleBreakDecrease, handleBreakIncrease, breakDuration}){\r\n    return(\r\n        <div className=\"col\">\r\n        <div className=\"float-right\">\r\n          <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n              {/* DONE! Update this text to display the current break session duration */}\r\n              {/*minutesToDuration converts numbers into minutes */}\r\n              Break Duration: {minutesToDuration(breakDuration)}\r\n            </span>\r\n            <div className=\"input-group-append\">\r\n              {/* DONE! Implement decreasing break duration and disable during a focus or break session*/}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"decrease-break\"\r\n                onClick={handleBreakDecrease}\r\n                disabled={session}\r\n              >\r\n                <span className=\"oi oi-minus\" />\r\n              </button>\r\n              {/* DONE! Implement increasing break duration and disable during a focus or break session*/}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"increase-break\"\r\n                onClick={handleBreakIncrease}\r\n                disabled={session}\r\n              >\r\n                <span className=\"oi oi-plus\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Break;","import React from 'react';\r\n\r\n\r\nfunction ActionBtns({session, playPause, isTimerRunning, classNames, stop}){\r\n    return(      \r\n    <div className=\"row\">\r\n    <div className=\"col\">\r\n      <div\r\n        className=\"btn-group btn-group-lg mb-2\"\r\n        role=\"group\"\r\n        aria-label=\"Timer controls\"\r\n      >\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          data-testid=\"play-pause\"\r\n          title=\"Start or pause timer\"\r\n          onClick={playPause}\r\n        >\r\n          <span\r\n            className={classNames({\r\n              oi: true,\r\n              \"oi-media-play\": !isTimerRunning,\r\n              \"oi-media-pause\": isTimerRunning,\r\n            })}\r\n          />\r\n        </button>\r\n        {/* DONE! TODO: Disable the stop button when there is no active session */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          data-testid=\"stop\"\r\n          title=\"Stop the session\"\r\n          onClick={stop}\r\n          disabled={!session}\r\n        >\r\n          <span className=\"oi oi-media-stop\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>)\r\n}\r\n\r\nexport default ActionBtns;","import React, { useState } from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport Session from \"./Session\";\r\nimport Focus from \"./Focus\";\r\nimport Break from \"./Break\";\r\nimport SessionBtns from \"./SessionBtns\";\r\n\r\n// These functions are defined outside of the component to insure they do not have access to state\r\n// and are, therefore more likely to be pure.\r\n\r\n/**\r\n * Update the session state with new state after each tick of the interval.\r\n * @param prevState\r\n *  the previous session state\r\n * @returns\r\n *  new session state with timing information updated.\r\n */\r\n\r\nfunction nextTick(prevState) {\r\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n  return {\r\n    ...prevState,\r\n    timeRemaining,\r\n  };\r\n}\r\n\r\n/**\r\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\r\n * @param focusDuration\r\n *    the current focus duration\r\n * @param breakDuration\r\n *    the current break duration\r\n * @returns\r\n *  function to update the session state.\r\n */\r\nfunction nextSession(focusDuration, breakDuration) {\r\n  /**\r\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n   */\r\n  return (currentSession) => {\r\n    if (currentSession.label === \"Focusing\") {\r\n      return {\r\n        label: \"On Break\",\r\n        timeRemaining: breakDuration * 60,\r\n      };\r\n    }\r\n    return {\r\n      label: \"Focusing\",\r\n      timeRemaining: focusDuration * 60,\r\n    };\r\n  };\r\n}\r\n\r\nfunction Pomodoro() {\r\n  // Timer starts out paused\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  // The current session - null where there is no session running\r\n  const [session, setSession] = useState(null);\r\n  // ToDo: Allow the user to adjust the focus and break duration.\r\n  //changed focusDuration = 25 to a state variable\r\n  const [focusDuration, setFocusDuration] = useState(25);\r\n  //changed breakDuration = 25 to a state variable\r\n  const [breakDuration, setBreakDuration] = useState(5);\r\n\r\n  /**\r\n   * Custom hook that invokes the callback function every second\r\n   * NOTE: You will not need to make changes to the callback function\r\n   */\r\n  useInterval(\r\n    () => {\r\n      if (session.timeRemaining === 0) {\r\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n        return setSession(nextSession(focusDuration, breakDuration));\r\n      }\r\n      return setSession(nextTick);\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n\r\n  /**\r\n   * Called whenever the play/pause button is clicked.\r\n   */\r\n  function playPause() {\r\n    setIsTimerRunning((prevState) => {\r\n      const nextState = !prevState;\r\n      if (nextState) {\r\n        setSession((prevStateSession) => {\r\n          // If the timer is starting and the previous session is null,\r\n          // start a focusing session.\r\n          if (prevStateSession === null) {\r\n            return {\r\n              label: \"Focusing\",\r\n              timeRemaining: focusDuration * 60,\r\n            };\r\n          }\r\n          return prevStateSession;\r\n        });\r\n      }\r\n      return nextState;\r\n    });\r\n  }\r\n  /* stops timer from running and ends session setSession=null */\r\n  function stop() {\r\n    setIsTimerRunning(() => {\r\n      setSession(null);\r\n      return false;\r\n    });\r\n  }\r\n  /*DO NOT if statement to bound lower and upper limits of the focus or break duration*/\r\n  const handleFocusIncrease = () =>\r\n    setFocusDuration((currentDuration) => Math.min(60, currentDuration + 5));\r\n  const handleFocusDecrease = () =>\r\n    setFocusDuration((currentDuration) => Math.max(5, currentDuration - 5));\r\n  const handleBreakIncrease = () =>\r\n    setBreakDuration((currentDuration) => Math.min(15, currentDuration + 1));\r\n  const handleBreakDecrease = () =>\r\n    setBreakDuration((currentDuration) => Math.max(1, currentDuration - 1));\r\n\r\n  //return=======no conditionals\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <div className=\"row\">\r\n        <Focus\r\n          focusDuration={focusDuration}\r\n          handleFocusDecrease={handleFocusDecrease}\r\n          handleFocusIncrease={handleFocusIncrease}\r\n          session={session}\r\n        />\r\n        <Break\r\n          session={session}\r\n          handleBreakDecrease={handleBreakDecrease}\r\n          handleBreakIncrease={handleBreakIncrease}\r\n          breakDuration={breakDuration}\r\n        />\r\n      </div>\r\n      <SessionBtns\r\n        session={session}\r\n        playPause={playPause}\r\n        isTimerRunning={isTimerRunning}\r\n        classNames={classNames}\r\n        stop={stop}\r\n      />\r\n      <Session\r\n        session={session}\r\n        focusDuration={focusDuration}\r\n        breakDuration={breakDuration}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Pomodoro;\r\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}